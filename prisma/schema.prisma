generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Admission {
  id               Int      @id @default(autoincrement())
  studentName      String
  contactNumber    String
  bloodGroup       String
  email            String
  nationality      String
  gender           String
  image            String?
  birthCertificate String
  religion         String
  dateOfBirth      DateTime
  presentAddress   String
  fatherName       String
  fatherPhone      String
  fatherOccupation String?
  motherName       String
  motherPhone      String?
  motherOccupation String
  sscEquivalent    String?
  sscGroup         String?
  sscBoard         String?
  sscBoardRoll     String?
  sscGPA           String?
  sscPassingYear   String?
  sscInstituteName String?

  hscEquivalent    String?
  hscGroup         String?
  hscBoard         String?
  hscBoardRoll     String?
  hscGPA           String?
  hscPassingYear   String?
  hscInstituteName String?

  createdAt DateTime @default(now())
}

model Student {
  id          String       @id
  username    String       @unique
  name        String
  surname     String
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime     @default(now())
  parentNId   BigInt?
  parentName  String?
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  gradeId     Int
  grade       Grade        @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results     Result[]
  birthday    DateTime

}

model Teacher {
  id          String    @id
  username    String    @unique
  name        String
  surname     String
  email       String?   @unique
  phone       String?   @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime  @default(now())
  subjects    Subject[]
  lessons     Lesson[]
  classes     Class[]
  joiningDate DateTime?
}

model Parent {
  id        String   @id
  username  String   @unique
  name      String
  surname   String
  email     String?  @unique
  phone     String   @unique
  address   String
  createdAt DateTime @default(now())
}

model Grade {
  id    Int @id @default(autoincrement())
  level Int @unique

  students Student[]
  classess Class[]
}

model Class {
  id       Int    @id @default(autoincrement())
  name     String @unique
  capacity Int

  supervisorId String?
  supervisor   Teacher?  @relation(fields: [supervisorId], references: [id])
  lessons      Lesson[]
  students     Student[]
  gradeId      Int
  grade        Grade     @relation(fields: [gradeId], references: [id])
  events       Event[]
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  teachers Teacher[]
  lessons  Lesson[]
  results  Result[]
}

model Lesson {
  id        Int      @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime

  subjectId   Int
  subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  teacherId   String
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  lessonId Int
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  
}

model AllSubject {
  id        String   @id @default(uuid())
  name      String?   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Result {
  id         String   @id @default(uuid())
  studentId  String
  subjectId  Int
  marks      Int?
  grade      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  subject    Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  studentId String
  student   Student @relation(fields: [studentId], references: [id])
  lessonId  Int
  lesson    Lesson  @relation(fields: [lessonId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  img         String?
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
